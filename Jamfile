import feature : feature ;

install stage-test : udp_test : <location>. ;
install stage : utrack : <location>. ;

feature pcap : off on win receive-only : composite propagated link-incompatible ;
feature.compose <pcap>win : <define>USE_WINPCAP ;
feature.compose <pcap>receive-only : <define>USE_SYSTEM_SEND_SOCKET ;

explicit stage-test ;
explicit stage ;

lib libpcap : : <name>pcap : <search>/opt/local/lib
	: <include>/opt/local/include <define>USE_PCAP ;

lib libwpcap : : <name>wpcap : <search>"c:\\Program Files\\wpdpack\\lib"
	:
	<include>"c:\\Program Files\\wpdpack\\include"
	<define>WPCAP <define>USE_PCAP ;

rule pcap ( properties * )
{
	local result ;
	if <pcap>off in $(properties)
	{
		result += <source>socket_system.cpp ;
	}
	else
	{
		if <target-os>windows in $(properties)
		{
			result += <library>libwpcap ;
		}
		else
		{
			result += <library>libpcap ;
		}

		result += <source>socket_pcap.cpp ;
	}
	return $(result) ;
}

lib ws2 : : <name>ws2_32 ;

exe udp_test : test_announce.cpp
	:
	<pcap>on
	<conditional>@pcap
	<target-os>windows:<library>ws2
	:
	;

explicit udp_test ;

exe utrack
	:
	main.cpp
	swarm.cpp
	announce_thread.cpp
	siphash24.c
	key_rotate.cpp
	receive_thread.cpp
	:
	<target-os>windows:<library>ws2
	<conditional>@pcap
	;

